"""Методические указания
Урок 33.1 Настройка Webhook для чат-бота
Задачи урока:
Настройка Webhook для чат-бота


1. Настройка Webhook для чат бота

Учитель:  Сегодня мы с вами настроим вебхуки для нашего бота.

setWebhook - Используйте этот метод, чтобы указать URL-адрес и получать входящие обновления через исходящий webhook.
 Всякий раз, когда появляется обновление для бота, мы отправляем запрос HTTPS POST на указанный URL-адрес,
  содержащий сериализованный в JSON файл aiogram.types.update.Update.

   В случае неудачного запроса мы откажемся от него после разумного количества попыток.
    Возвращает значение True при успешном выполнении. Если вы хотите убедиться, что запрос Webhook поступает из Telegram,
     мы рекомендуем использовать секретный путь в URL-адресе, например https://www.example.com /<токен>.
      Поскольку никто другой не знает токен вашего бота, вы можете быть уверены, что это мы.

url - URL-адрес HTTPS для отправки обновлений.
Используйте пустую строку для удаления интеграции с webhook
certificate - Загрузите свой сертификат открытого ключа, чтобы можно было проверить используемый корневой сертификат.
ip_address - Фиксированный IP-адрес, который будет использоваться для отправки запросов webhook вместо IP-адреса,
 разрешенного через DNS
max_connections - Максимально допустимое количество одновременных HTTPS-подключений к webhook для доставки обновлений - 1-100
. Значение по умолчанию равно 40.
Используйте более низкие значения, чтобы ограничить нагрузку на сервер вашего бота,
 и более высокие значения, чтобы увеличить пропускную способность вашего бота.
allowed_updates - Сериализованный в формате JSON список типов обновлений, которые вы хотите, чтобы ваш бот получал.
Например, укажите [„сообщение“, „edited_channel_post“, „callback_query“], чтобы получать обновления только этих типов.
 Укажите пустой список для получения всех типов обновлений, кроме chat_member (по умолчанию).
  Если не указано, будет использоваться предыдущая настройка.
drop_pending_updates - Передайте значение True, чтобы удалить все ожидающие обновления

Давайте напишем небольшого бота, с учетом тех знаний которые мы получили и попробуем его реализовать с помощью webhook-ов.
 В данном случае у нас нет подходящего сервера для выгрузки нашего бота, поэтому мы сделаем это на локальном компьютере,
  но с использованием вебхуков.

Так как при работе с вебхуками нам потребуется определенный адрес в сети, на который будут идти уведомления о сообщениях,
 нам потребуется сторонняя утилита ngrok.

Для начала нам потребуется перейти на официальный сайт https://ngrok.com/ и зарегистрироваться


После того, как регистрация прошла успешно, нам потребуется ввести логин и пароль и нас перекинет в рабочую панель


Теперь нам необходимо скачать версию ngrok под необходимую операционную систему на вашем персональном компьютере.
 После того как скачался архив распаковываем его

Теперь мы можем запустить ngrok и произвести его базовую настройку.
 Для этого нам надо ввести команду ngrok config add-authtoken ваш токен

Данную команду вы можете найти на главной странице на рабочей панели.
 После установки токена мы можем запустить свой локальный сервер для проверки.
 Для запуска сервера вводим в ngrok команду ngrok http 8000

Этой командой мы запускаем наш локальный сервер на 8000 порту, а также получаем возможность доступа к нему из интернета

Отлично. Теперь нам необходимо создать нашего бота
Для начала импортируем все необходимое
"""


import logging

from aiogram import Bot, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.webhook import SendMessage
from aiogram.utils.executor import start_webhook




"""Создадим константы, которые нам потребуются"""

API_TOKEN = 'BOT_TOKEN_HERE'

# настройки вебхука
WEBHOOK_HOST = 'https://your.domain' # в данной переменной мы указываем адрес вашего сервера
WEBHOOK_PATH = '/path/to/api' # путь до api,  где слушает бот
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# настройки веб сервера
WEBAPP_HOST = 'localhost'
WEBAPP_PORT = 3001


"""

Давайте разберем эти переменные из базового шаблона.
WEBHOOK_HOST - в данной переменной мы указываем адрес вашего сервера
WEBHOOK_PATH - путь до api,  где слушает бот
WEBHOOK_URL - в данной переменной формируется адрес необходимый url адрес, на который будут приниматься запросы
WEBAPP_HOST - хост нашего приложения, оставляем локальный
WEBAPP_PORT – порт, на котором работает наше приложение

Произведем настройки данных переменных согласно данным, которые предоставил нам ngrok
# настройки вебхуков
"""

WEBHOOK_HOST = 'https://3f72-185-69-9-73.eu.ngrok.io'
WEBHOOK_PATH = ''
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# настроки веб сервера
WEBAPP_HOST = '127.0.0.1'  # or ip
WEBAPP_PORT = 8000




"""Так, с этим разобрались. Пойдем дальше и создадим объекты бота и диспетчера, а также укажем уровень логированния"""


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())



"""
Создадим несколько функций on_startup и on_shutdown"""


async def on_startup(dp):
   await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(dp):
   logging.warning('Shutting down..')
   await bot.delete_webhook()
   logging.warning('Bye!')



"""
Асинхронная функция on_startup устанавливает вебхук для нашего телеграм бота,
 на который будут отсылаться уведомления о получении новых сообщений.
 on_shutdown, наоборот, удаляет этот вебхук при выключении и выводит соответствующий текст в логи.

Теперь давайте создадим обычный обработчик сообщений для бота реагирующего на команды start и help
"""

@dp.message_handler(commands=['start'])
async def echo(message: types.Message):
   return SendMessage(message.chat.id, message.text)


@dp.message_handler(commands=['help'])
async def echo(message: types.Message):
   return SendMessage(message.chat.id, 'Вы обратились к справке бота')




"""Готово! ну и теперь непосредственно укажем, что необходимо запускать не пуллинг, а вебхуки"""


if __name__ == '__main__':
   start_webhook(
       dispatcher=dp,
       webhook_path=WEBHOOK_PATH,
       on_startup=on_startup,
       on_shutdown=on_shutdown,
       skip_updates=True,
       host=WEBAPP_HOST,
       port=WEBAPP_PORT,
   )


"""

Рассмотрим более подробнее код выше

start_webhook как мы видим из названия, как раз таки и запускает работу нашего бота через вебхуки. 
В него мы передаем диспетчер, функции при запуске и остановке нашего бота, хост и порт нашего приложения
 skip updates указывает, что при запуске пропускаются все сообщения, которые были получены в то время, когда бот не работал

Запускаем бота и все отлично работает. Единственное, что требуется не забывать при каждом запуске ngrok адрес url будет меняться.

Теперь давайте сделаем тоже самое, но уже с выгрузкой на сторонний сервис.
 Правда пока, что опять перейдем на пуллинг
аходим по ссылкам https://github.com/ и  https://railway.app/  и регистрируемся. 
После регистрации на railway нам дадут бесплатное время на работу с сервисом.


Переходим на github и создаем новый проект

После этого в railway создаем новый проект


выбираем деплой из гитхаба


Далее прописываем стандартный код бота
"""

import logging

from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = 'Ваш токен'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def echo(message: types.Message):
   await message.reply('Start')


@dp.message_handler(commands=['help'])
async def echo(message: types.Message):
   await message.reply('Вы обратились к справке бота')


if __name__ == '__main__':
   executor.start_polling(dp, skip_updates=True)

"""
Создадим отдельно специальный файл Procfile без  расширения и запишем в него строку
worker: python имя файла

Также нам надо создать файл requirements.txt, с прописанными всеми установленными библиотеками. 
Для этого воспользуемся командой
pip freeze > requirements.txt

После всех этих манипуляций у нас должно быть три файла. 
Теперь переходим в наш созданный проект в github и просто перетягиваем туда все три файла.

После этого railway должен начать сборку и деплой нашего бота


После того как процесс завершится ваш бот будет готов к работе.
 В бесплатной версии данного сервиса нам дано 500 часов для ваших проектов

Реализацию выгрузки с вебхуками на отдельный сервис мы рассмотрим на следующем занятии. 
Ранее был отличный сервис Heroku, но увы он теперь закрыл регистрацию.


2. Решение задач
Задача 1
	Добавить боту возможность перехватывать текст привет и выводит в ответ приветственное сообщение"""

"""Решение"""

@dp.message_handler(text='Привет')
async def echo(message: types.Message):
   await message.answer('Приветствую тебя человек')



"""
Домашняя работа
Задача 1
Реализовать ‘выгрузку’ эхо бота на площадку из занятия(ngrok)

"""




