import logging
from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as fmt
from aiogram.dispatcher.filters import CommandHelp, CommandStart, Text
from config import BOT_TOKEN
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

####
import datetime
import pytz

from aiogram.dispatcher import filters

# –ó–∞–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
sar_tz = pytz.timezone('Europe/Saratov')
mad_tz = pytz.timezone('Europe/Madrid')
mos_tz = pytz.timezone('Europe/Moscow')
kiev_tz = pytz.timezone('Europe/Kiev')
# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∫–∞–∂–¥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
sar_time = datetime.datetime.now(sar_tz)
mad_time = datetime.datetime.now(mad_tz)
mos_time = datetime.datetime.now(mos_tz)
kiev_time = datetime.datetime.now(kiev_tz)
# –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –∫–∞–∂–¥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
Madrid = "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–∞–¥—Ä–∏–¥–µ:", mad_time.strftime("%H:%M:%S")
Moscow = "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ:", mos_time.strftime("%H:%M:%S")
Kiev = "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–∏–µ–≤–µ:", kiev_time.strftime("%H:%M:%S")
Saratov = "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –°–∞—Ä–∞—Ç–æ–≤–µ:", sar_time.strftime("%H:%M:%S")



###


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(f"privet,{message.from_user.full_name}")

@dp.message_handler(CommandHelp())
async def bot_start(message: types.Message):
    await message.answer(f"{message.from_user.full_name}, –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

@dp.message_handler(Text(startswith='–ü—Ä–∏–≤–µ—Ç'))
async def bot_start(message: types.Message):
    await message.answer(f"–ò —Ç–µ–±–µ –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å, {message.from_user.full_name}")

@dp.message_handler(Text(equals='–í—Ä–µ–º—è'))
async def bot_start(message: types.Message):
    await message.answer(f"{Madrid}\n{Moscow}\n{Kiev}\n{Saratov}")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–°–∞—à–∞
@dp.message_handler(Text(equals='–§–æ—Ç–æ –°–∞—à–∏'))
async def send_photo(message: types.Message):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    photo = types.InputFile('tg/sasha.jpg')

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption='–°–∞—à–∞ –≤ —Ä–∞—Å—Å–≤–µ—Ç–µ —Å–∏–ª')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ú–∞—Ä–∏–Ω–∞
@dp.message_handler(Text(equals='–§–æ—Ç–æ –ú–∞—Ä–∏–Ω—ã'))
async def send_photo(message: types.Message):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    photo = types.InputFile('tg/Marina.jpg')

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption='–ö—É–ø–ª—é –Ω–µ–º–Ω–æ–∂–∫–æ —è –∫–∞—Ä—Ç–æ—à–∫–∏ –í–ò–ê–ô–ü–ò')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ú–∞—à–∞
@dp.message_handler(Text(equals='–§–æ—Ç–æ –ú–∞—à–∏'))
async def send_photo(message: types.Message):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    photo = types.InputFile('tg/Masha.jpg')

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption='–ú–Ω—è–º–ú–Ω—è–º–∞')

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–°–µ—Ä–µ–∂–∞
@dp.message_handler(Text(equals='–§–æ—Ç–æ –°–µ—Ä–µ–∂–∏'))
async def send_photo(message: types.Message):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    photo = types.InputFile('tg/brat.jpg')

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption='–Æ–Ω–∞–π—Ç–µ–¥–°–µ–∫—Å–∏–ë–æ–π–∑')


###############################################


@dp.message_handler(hashtags=['eur', 'usd'])
async def hashtag_example(msg: types.Message):
    await msg.answer('–ï–µ–µ–µ, –¥–µ–Ω—å–≥–∏ üòé')



IMAGE_REGEXP = r'https://.+?\.(jpg|png|jpeg)'


@dp.message_handler(filters.Regexp(IMAGE_REGEXP))
async def regexp_example(msg: types.Message):
    await msg.answer('–ü–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–µ —Ç–∞–∫ –ª–∏?')

@dp.message_handler(commands='change_photo', is_chat_admin=True)
async def chat_admin_example(msg: types.Message):
    await msg.answer('–ù–µ—Ç')


@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)


